#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
int n, m, h;
double result = 0;
int arr[16][16];
bool visited[16];
int d[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };
//int d[8][2] = { {-2,-1},{-1,-2},{1,-2},{2,-1},{-2,1},{-1,2},{1,2},{2,1} };
//int d[6][3] = { {0,-1,0},{0,1,0},{0,0,-1},{0,0,1},{1,0,0},{-1,0,0} };

int main() {
	int dfs(int, double);
	int test_case;
	cin >> test_case;
	for (int test = 1; test <= test_case; test++) {
		cin >> n;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cin >> arr[i][j];
			}
		}
		dfs(0, 1);
		printf("#%d %.6f\n", test, result * 100);
		result = 0;
	}
	return 0;
}

int dfs(int level, double sum) {
	if (level == n) {
		if (sum > result)
			result = sum;
		return 0;
	}
	if (sum < result)
		return 0;
	if (sum == 0)
		return 0;

	for (int i = 0; i < n; i++) {
		if (!visited[i]) {
			visited[i] = true;
			double poss = (double)arr[level][i] / 100;
			dfs(level+1, sum*poss);
			visited[i] = false;
		}
	}
}